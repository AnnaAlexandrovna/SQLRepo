--1.  Написать запрос, выводящий всю информацию о департаментах. Упорядочить по коду
--департамента.

SELECT * 
FROM departments dep
ORDER BY dep.department_id;

--2. Написать запрос, выбирающий ID, имя+фамилию (в виде одного столбца через пробел)
--и адрес электронной почты всех клиентов. (Использовать конкатенацию строк и
--переименование столбца с именем и фамилией на «NAME»). Упорядочить по коду
--клиента.

SELECT cust.customer_id as id, 
    (cust.cust_first_name|| ' '||cust.cust_last_name ) as name,
    cust.cust_email
FROM customers cust
ORDER BY cust.customer_id;

--3. Написать запрос, выводящий сотрудников, зарплата которых за год лежит в диапазоне
--от 100 до 200 тыс. дол., упорядочив их по занимаемой должности, зарплате (от большей
--к меньшей) и фамилии. Выбранные данные должны включать фамилию, имя, должность
--(код должности), email, телефон, зарплату за месяц за вычетом налогов. Будем считать,
--что у нас прогрессивная шкала налогообложения: с зарплаты за год от 100 до 150 тыс.
--дол. налог составляет 30%, выше – 35%. Результат округлить до целого дол.
--Обязательно использовать between и case.

SELECT emp.last_name, 
    emp.first_name, 
    emp.job_id, 
    emp.email,
    CASE 
    WHEN (emp.salary*12)>100000 THEN round(emp.salary*12)
    WHEN (emp.salary*12)<150000 THEN round(emp.salary*12*0.7)
    ELSE round(emp.salary*12*0.65)
    END as income
FROM employees emp
WHERE CASE 
    WHEN (emp.salary*12)>100000 THEN emp.salary*12
    WHEN (emp.salary*12)<150000 THEN (emp.salary*12*0.7)
    ELSE (emp.salary*12*0.65)
    END BETWEEN 100000 AND 200000
ORDER BY emp.job_id, 
  emp.salary DESC, 
  emp.last_name;
  
--4. Выбрать страны с идентификаторами DE, IT или RU. Переименовать столбцы на «Код
--страны», «Название страны». Упорядочить по названию страны.

SELECT c.country_id as "Код страны",
    c.country_name as "Название страны"
FROM countries c
WHERE c.country_id in('DE','IT','RU')
ORDER BY c.country_name;

--5. Выбрать имя+фамилия сотрудников, у которых в фамилии вторая буква «a» (латинская),
--а в имени присутствует буква «d» (не важно, в каком регистре). Упорядочить по имени.
--Использовать оператор like и функции приведения к нужному регистру. !

SELECT (emp.first_name || ' '|| emp.last_name) as FIO
FROM employees emp
WHERE emp.last_name LIKE '_a%'
    AND LOWER(emp.first_name) LIKE '%d%' 
ORDER BY emp.first_name, 
  emp.last_name;

--6. Выбрать сотрудников у которых фамилия или имя короче 5 символов. Упорядочить
--записи по суммарной длине фамилии и имени, затем по длине фамилии, затем просто по
--фамилии, затем просто по имени.

SELECT * 
FROM employees emp
WHERE length(emp.last_name)<5 
    OR length(emp.first_name)<5
ORDER BY length(emp.last_name) + length(emp.first_name),
    length(emp.last_name), 
    emp.last_name, 
    emp.first_name;
  
--7. Выбрать должности в порядке их «выгодности» (средней зарплаты, за среднюю взять
--среднее-арифметическое минимальной и максимальной зарплат). Более «выгодные»
--должности должны быть первыми, в случае одинаковой зарплаты упорядочить по коду
--должности. Вывести столбцы код должности, название должности, средняя зарплата
--после налогов, округленная до сотен. Считаем шкалу налогообложения плоской – 18%.

SELECT j.job_id,
    ROUND((j.max_salary + j.min_salary)/2*0.82, 2) as avg_salary
FROM jobs j
ORDER BY (j.max_salary + j.min_salary)/2 DESC,
    j.job_id;
--8. Будем считать, что все клиенты делятся на категории A, B, C. Категория A – клиенты с
--кредитным лимитом >= 3500, B >= 1000, C – все остальные. Вывести всех клиентов,
--упорядочив их по категории в обратном порядке (сначала клиенты категории A), затем
--по фамилии. Вывести столбцы фамилия, имя, категория, комментарий. В комментарии
--для клиентов категории A должно быть строка «Внимание, VIP-клиенты», для
--остальных клиентов комментарий должен остаться пустым (NULL).
SELECT c.cust_last_name,
    c.cust_first_name, 
    CASE 
    WHEN c.credit_limit>=3500 THEN 'A'
    WHEN c.credit_limit<3500 AND c.credit_limit>=100 THEN 'B'
    ELSE 'C'
    END as category,
    CASE 
    WHEN c.credit_limit>=3500 THEN 'Внимание, VIP-клиенты'
    ELSE null
    END as comments
FROM customers c
ORDER BY 
    CASE 
    WHEN c.credit_limit>=3500 THEN 'A'
    WHEN c.credit_limit<3500 AND c.credit_limit>=100 THEN 'B'
    ELSE 'C'
    END,
    c.cust_last_name;
	
--9. Вывести месяцы (их название на русском), в которые были заказы в 1998 году. Месяцы
--не должны повторяться и должны быть упорядочены. Использовать группировку по
--функции extract от даты для исключения дублирования месяцев и decode для выбора
--названия месяца по его номеру. Подзапросы не использовать.
SELECT  
    DECODE(
    extract(MONTH FROM o.order_date),
        '1', 'Январь',
        '2', 'Февраль',
        '3', 'Март',
        '4', 'Апрель',
        '5', 'Май',
        '6', 'Июнь',
        '7', 'Июль',
        '8', 'Август',
        '9', 'Сентябрь',
        '10', 'Октябрь',
        '11', 'Ноябрь',
        '12',' Декабрь') as month
FROM orders o
WHERE to_char(order_date, 'YYYY') = '1998'
GROUP BY  extract(MONTH FROM o.order_date)
ORDER BY extract(MONTH FROM o.order_date);
--10. Написать предыдущий запрос, используя для получения названия месяца функцию
--to_char (указать для функции nls_date_language 3-м параметром). Вместо группировки
--использовать distinct, подзапросы не использовать.

SELECT DISTINCT to_char(o.order_date, 'Month','nls_date_language=russian') as month
FROM orders o
WHERE to_char(o.order_date, 'YYYY') = '1998' 
ORDER BY  decode (
    month,
     'Январь', 1,
     'Февраль', 2,
     'Март', 3,
     'Апрель', 4,
     'Май', 5,
     'Июнь', 6,
     'Июль', 7,
     'Август', 8,
     'Сентябрь', 9,
     'Октябрь', 10,
     'Ноябрь', 11
) desc;

--11. Написать запрос, выводящий все даты текущего месяца. Текущий месяц должен браться
--из sysdate. Второй столбец должен содержать комментарий в виде строки «Выходной»
--для суббот и воскресений. Для определения дня недели воспользоваться функций
--to_char. Для выбора чисел от 1 до 31 можно воспользоваться псевдостолбцом rownum,
--выбирая данные из любой таблицы, где количество строк более 30.

SELECT trunc(sysdate, 'MONTH') + ROWNUM- 1 date_,
    decode(
    to_char(trunc(sysdate, 'MONTH') + rownum - 1, 'day','nls_date_language=russian' ),
    'суббота','выходной',
    'воскресенье','выходной'
    ) comment_
FROM dual
CONNECT BY ROWNUM <= TO_NUMBER(to_char(last_day(sysdate), 'DD'));

--12. Выбрать всех сотрудников (код сотрудника, фамилия+имя через пробел, код должности,
--зарплата, комиссия - %), которые получают комиссию от заказов. Воспользоваться
--конструкцией is not null.Упорядочить сотрудников по проценту комиссии (от большего к
--меньшему), затем по коду сотрудника.

SELECT emp.employee_id, 
    emp.first_name|| ' '|| emp.last_name name,
    emp.job_id,
    emp.commission_pct
FROM employees emp
WHERE emp.commission_pct is not null
ORDER BY emp.commission_pct DESC, 
    emp.employee_id;


--13. Получить статистику по сумме продаж за 1995-2000 годы в разрезе кварталов (1 квартал
--– январь-март и т.д.). В выборке должно быть 6 столбцов – год, сумма продаж за 1-ый, 2-
--ой, 3-ий и 4-ый квартала, а также общая сумма продаж за год. Упорядочить по году.
--Воспользоваться группировкой по году, а также суммированием по выражению с case
--или decode, которое будут отделять продажи за нужный квартал.

SELECT to_char(o.order_date, 'YYYY') year, 
    sum(
    case
        when to_char(o.order_date, 'Q')='1' then o.order_total
    end
    )  q, 
    sum(
    case
        when to_char(o.order_date, 'Q')='2' then o.order_total
    end
    )  q1,
     sum(
    case
        when to_char(o.order_date, 'Q')='3' then o.order_total
    end
    )  q3,
    sum(
    case
        when to_char(o.order_date, 'Q')='4' then o.order_total
    end
    )  q4, 
    sum(o.order_total) year_sum
FROM orders o
WHERE 1995<=TO_NUMBER(to_char(o.order_date, 'YYYY')) AND TO_NUMBER(to_char(o.order_date, 'YYYY'))<=2000
GROUP BY to_char(o.order_date, 'YYYY')
ORDER BY TO_NUMBER(to_char(o.order_date, 'YYYY'));


--14. Выбрать из таблицы товаров всю оперативную память. Считать таковой любой товар
--для которого в названии указан размер в MB или GB (в любом регистре), название
--товара не начинается с HD, а также в первых 30 символах описания товара не
--встречаются слова disk, drive и hard. Вывести столбцы: код товара, название товара,
--гарантия, цена (по прайсу – LIST_PRICE), url в каталоге. В поле гарантия должно быть
--выведено целое число – количество месяцев гарантии (учесть, что гарантия может быть
--год и более). Упорядочить по размеру памяти (от большего к меньшему), затем по цене
--(от меньшей к большей). Размер для упорядочивания извлечь из названия товара по
--шаблону NN MB/GB (не забыть при этом сконвертировать GB в мегабайты) c помощью
--regexp_replace. Like не использовать, вместо него использовать regexp_like с явным
--указанием, что регистр букв следует игнорировать.

SELECT p.product_id, 
    p.product_name, 
    EXTRACT(YEAR FROM p.warranty_period)*12 + EXTRACT(MONTH FROM p.warranty_period) as warranty, 
    p.list_price
FROM product_information p
WHERE REGEXP_LIKE(p.product_name, 'MB|GB', 'i') 
    AND NOT REGEXP_LIKE(p.product_name, '^HD', '') 
    AND NOT REGEXP_LIKE(SUBSTR(p.product_description,0,30), '(disk|drive|hard)') 
    AND REGEXP_SUBSTR(p.product_name, '(\s|^)(\d+)\s*(mb|gb)', 1, 1, 'i', 2) IS NOT NULL
ORDER BY DECODE(
    UPPER(REGEXP_SUBSTR(p.product_name, '(\s|^)(\d+)\s*(mb|gb)', 1, 1, 'i', 3)), 
    'MB', TO_NUMBER(REGEXP_SUBSTR(p.product_name, '(\s|^)(\d+)\s*(mb|gb)', 1, 1, 'i', 2)),
    'GB', TO_NUMBER(REGEXP_SUBSTR(REGEXP_REPLACE(p.product_name, '(\s|^)(\d+)\s*(gb)', '\1\2*1024 MB',1,1,'i'), '(\s|^)(\d+).(\d+)\s*(mb|gb)', 1, 1, 'i',2))
    *TO_NUMBER(REGEXP_SUBSTR(REGEXP_REPLACE(p.product_name, '(\s|^)(\d+)\s*(gb)', '\1\2*1024 MB',1,1,'i'), '(\s|^)(\d+).(\d+)\s*(mb|gb)', 1, 1, 'i',3)) ) desc,
    p.list_price asc
;



--15. Вывести целое количество минут, оставшихся до окончания занятий. Время окончания
--занятия в запросе должно быть задано в виде строки, например «21:30». Явного указания
--текущей даты в запросе быть не должно. Можно воспользоваться комбинацией функций
--to_char/to_date.


SELECT round(((trunc(SYSDATE, 'DD' )+(TO_NUMBER(REGEXP_SUBSTR('21:30', '(\d+):(\d+)', 1, 1, 'i', 1))*60+TO_NUMBER(REGEXP_SUBSTR('21:30', '(\d+):(\d+)', 1, 1, 'i', 2)))/(24*60))- sysdate)*24*60) time
FROM DUAL;
